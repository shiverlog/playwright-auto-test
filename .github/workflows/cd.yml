# Description : cd.yml - 📌 CI/CD 워크플로우
# Author : Shiwoo Min
# Date : 2024-03-10
name: CD - Deploy Application
on:
  push:
    branches: [main, develop, release]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # repository 에서 최신 코드 가져오기
      - name: Checkout repository
        uses: actions/checkout@v4
      # Node.js 패키지  설치
      - name: Install dependencies
        run: npm install
      # Playwright Browsers 브라우저 설치
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
      # 배포 전 Playwright 테스트 실행
      - name: Run Playwright tests before deployment
        run: npx playwright test
      # 애플리케이션 빌드
      - name: Build application
        run: npm run build
      # Docker Hub 로그인
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Docker 이미지 빌드 및 푸시
      - name: Build and push Docker image
        env:
          IMAGE_NAME: my-app
        run: |
          GIT_HASH=$(git rev-parse --short HEAD)
          IMAGE_TAG="$IMAGE_NAME:$GIT_HASH"
          DOCKER_REPO="${{ secrets.DOCKER_USERNAME }}/$IMAGE_NAME"

          echo "Building Docker image: $IMAGE_TAG"
          docker build --build-arg="BUILD_ENV=${BUILD_ENV}" -t $IMAGE_TAG .

          echo "Tagging and pushing to Docker Hub..."
          docker tag $IMAGE_TAG $DOCKER_REPO:latest
          docker tag $IMAGE_TAG $DOCKER_REPO:$GIT_HASH
          docker push $DOCKER_REPO:latest
          docker push $DOCKER_REPO:$GIT_HASH

      # 애플리케이션 배포 (SSH 원격 서버)
      - name: Deploy application
        env:
          IMAGE_NAME: my-app
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            DOCKER_REPO="${{ secrets.DOCKER_USERNAME }}/$IMAGE_NAME"
            GIT_HASH=$(git rev-parse --short HEAD)

            echo "Pulling latest Docker image..."
            docker pull $DOCKER_REPO:latest

            echo "Stopping and removing old container..."
            docker stop $IMAGE_NAME || true
            docker rm $IMAGE_NAME || true

            echo "Running new container..."
            docker run -d --name $IMAGE_NAME -p 80:3000 $DOCKER_REPO:latest
          EOF
