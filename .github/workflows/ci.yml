# Description : ci.yml - 📌 CI/CD 워크플로우
# Author : Shiwoo Min
# Date : 2025-03-25

name: CI - Workflow

on:
  workflow_call:

# 중복된 워크플로우 실행 방지
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# 공통 환경 변수 정의
env:
  NODE_VERSION: 20
  NX_NO_CLOUD: true

jobs:
  # 1. 테스트 단계: Lint / Unit Test / Playwright E2E
  test:
    name: Lint, Unit & Playwright Test
    runs-on: ubuntu-latest

    steps:
      # 저장소 코드 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v4

      # Node.js 설정 (버전: 20)
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      # 의존성 설치 (npm 기준)
      - name: Install dependencies (pnpm)
        run: pnpm install --frozen-lockfile

      # Lint 실행 (오류가 나도 계속 진행)
      - name: Run Lint
        run: pnpm run lint
        continue-on-error: true

      # 유닛 테스트 실행
      - name: Run Unit Tests
        run: pnpm test

  # 2. 빌드 단계: Docker 이미지 빌드 및 푸시
  build:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: test # 테스트 job이 성공해야 실행됨
    permissions:
      id-token: write
      contents: read

    steps:
      # 저장소 코드 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 전체 Git 히스토리 가져오기 (Nx 빌드 분석에 필요)

      # AWS 자격 증명 설정 (필요 시 주석 해제)
      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v2
      #   with:
      #     role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
      #     aws-region: ${{ secrets.AWS_REGION }}
      #     role-session-name: ci-session

      # pnpm 설정
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      # Node.js 설정 (pnpm 용)
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      # 의존성 설치 (pnpm 기준)
      - name: Install dependencies (pnpm)
        run: pnpm install --frozen-lockfile

      # 영향 받은 프로젝트 빌드 (Nx 기반)
      - name: Show Affected Apps
        run: |
          BASE_BRANCH=$(git merge-base origin/main HEAD)
          echo "Base branch: $BASE_BRANCH"
          pnpm nx show projects --affected --type app --base=$BASE_BRANCH --head=HEAD

      # 영향 받은 앱 기준으로 Docker 이미지 빌드 및 푸시
      - name: Build and push Docker images
        env:
          IMAGE_NAME: ${{ github.repository }}
          BUILD_ENV: production
        run: |
          set -e
          BASE_BRANCH=$(git merge-base origin/main HEAD)
          AFFECTED_PROJECTS=$(pnpm nx show projects --affected --type app --base=$BASE_BRANCH --head=HEAD)

          AFFECTED_PROJECTS=$(echo "$AFFECTED_PROJECTS" | tr -s '[:space:]' ' ')
          IFS=' ' read -r -a PROJECTS <<< "$AFFECTED_PROJECTS"

          for project in "${PROJECTS[@]}"; do
            FINAL_IMAGE_NAME="${IMAGE_NAME}-${project}"
            DOCKERFILE_PATH="apps/$project/Dockerfile"

            echo "::group::Building image for $project"
            if [[ ! -f "$DOCKERFILE_PATH" ]]; then
              echo "[WARN] Dockerfile not found: $DOCKERFILE_PATH"
              echo "::endgroup::"
              continue
            fi

            docker build --build-arg="BUILD_ENV=${BUILD_ENV}" -t $FINAL_IMAGE_NAME -f $DOCKERFILE_PATH .
            docker push $FINAL_IMAGE_NAME
            echo "::endgroup::"
          done
