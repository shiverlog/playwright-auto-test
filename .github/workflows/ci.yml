# Description : ci.yml - üìå CI/CD ÏõåÌÅ¨ÌîåÎ°úÏö∞
# Author : Shiwoo Min
# Date : 2024-03-10
name: CI / CD - Integrated Workflow

on:
  push:
    branches: [main, develop, release]
  pull_request:
    branches: [main, develop, release]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # 1. ÌÖåÏä§Ìä∏ - Lint / Unit / Playwright
  test:
    name: Lint, Unit & Playwright Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Lint
        run: npm run lint
        continue-on-error: true

      - name: Run Unit Tests
        run: npm test

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Run Playwright Tests
        run: npx playwright test

      - name: Upload Playwright Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/

  # 2. Docker Build (Nx Í∏∞Î∞ò ÌîÑÎ°úÏ†ùÌä∏Ïö©)
  build:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: test
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v2
      #   with:
      #     role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
      #     aws-region: ${{ secrets.AWS_REGION }}
      #     role-session-name: ci-session

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build affected projects
        run: |
          BASE_BRANCH=$(git rev-parse HEAD^)
          pnpm nx affected --target=build --base=$BASE_BRANCH --head=HEAD --parallel=3
        env:
          NX_NO_CLOUD: true

      - name: Build and push Docker images
        env:
          IMAGE_NAME: ${{ github.repository }}
        run: |
          BASE_BRANCH=$(git rev-parse HEAD^)
          AFFECTED_PROJECTS=$(pnpm nx show projects --affected --type app --base=$BASE_BRANCH --head=HEAD)

          AFFECTED_PROJECTS=$(echo "$AFFECTED_PROJECTS" | tr -s '[:space:]' ' ')
          IFS=' ' read -r -a PROJECTS <<< "$AFFECTED_PROJECTS"

          for project in "${PROJECTS[@]}"; do
            FINAL_IMAGE_NAME="${IMAGE_NAME}-${project}"
            echo "Building image: $FINAL_IMAGE_NAME"
            docker build --build-arg="BUILD_ENV=${BUILD_ENV}" -t $FINAL_IMAGE_NAME -f apps/$project/Dockerfile .
            docker push $FINAL_IMAGE_NAME
          done

  # 3. Î∞∞Ìè¨ (Docker Hub + ÏõêÍ≤© ÏÑúÎ≤Ñ)
  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/release'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Deploy to Remote Server
        env:
          IMAGE_NAME: my-app
        run: echo "Docker push ÏôÑÎ£å"
